// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

 enum PostType {
  video
  text
  photo
  citation
  reference
}

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String @map("user_id")
  type        PostType
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  repost      Boolean @default(false)
  published   Boolean @default(false)
  likes       Like[]
  comments    Comment[]
  tags        Tag []
  text        String?
  author      String?
  photoPath   String?
  reference   String?
  description String?
  link        String?
  name        String?
  preview     String?
  message     String?

  @@index([type])
  @@map("posts")
}

model Tag {
  id        String  @id @default(uuid())
  text      String
  posts     Post[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  @@index([text])
  @@map("tags")
}

model Comment {
  id          String    @id @default(uuid())
  message     String
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  postId      String    @map("post_id") @unique @db.Uuid
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  @@index([postId])
  @@map("comments")
}

model Like {
  id          String    @id @default(uuid())
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId      String    @map("post_id") @unique @db.Uuid
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  @@map("likes")
}
